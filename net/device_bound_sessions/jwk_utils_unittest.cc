// Copyright 2024 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "net/device_bound_sessions/jwk_utils.h"

#include "base/json/json_reader.h"
#include "net/device_bound_sessions/test_support.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace net::device_bound_sessions {

namespace {

constexpr uint8_t kES256Spki[] = {
    0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02,
    0x01, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0x85, 0xE5, 0x22, 0x74, 0x8C, 0x74, 0x18, 0x2D, 0x65,
    0x25, 0x6C, 0x44, 0x19, 0x29, 0x62, 0x03, 0x62, 0x7A, 0x35, 0x8E, 0x2E,
    0x52, 0xE6, 0x58, 0xE5, 0x06, 0x15, 0xBC, 0x1E, 0x41, 0x42, 0x15, 0x00,
    0x77, 0x6D, 0x34, 0x5A, 0x31, 0x7A, 0x6A, 0x14, 0x33, 0x6D, 0x25, 0x75,
    0x31, 0x3B, 0xB9, 0xA4, 0x69, 0x82, 0xC8, 0x04, 0x24, 0x32, 0xE3, 0x82,
    0x46, 0x7F, 0x2F, 0xB4, 0x3B, 0x46, 0x7E};

TEST(JWKUtilsTest, InvalidSpki) {
  base::Value::Dict converted =
      ConvertPkeySpkiToJwk(crypto::SignatureVerifier::ECDSA_SHA256, {});
  EXPECT_TRUE(converted.empty());
}

TEST(JWKUtilsTest, UnsupportedAlgo) {
  static constexpr uint8_t kSpki[] = {
      0x30, 0x82, 0x01, 0x0A, 0x02, 0x82, 0x01, 0x01, 0x00, 0x9B, 0xED, 0x6F,
      0x30, 0x89, 0xAA, 0x27, 0xD1, 0xEF, 0x09, 0x4B, 0x7A, 0xEF, 0xD0, 0x2C,
      0x8F, 0xDA, 0x13, 0x48, 0x3A, 0x5E, 0x2B, 0xB5, 0xB8, 0x37, 0x06, 0xD4,
      0x0E, 0x2B, 0xAD, 0x89, 0x21, 0xE6, 0x09, 0xCF, 0x09, 0x9E, 0x86, 0x60,
      0x97, 0x59, 0x3E, 0x30, 0xC4, 0x78, 0x57, 0x7B, 0x5D, 0x1C, 0x0F, 0x18,
      0xAF, 0x24, 0x11, 0x4E, 0x30, 0x46, 0x07, 0xF1, 0x4F, 0xFE, 0xE9, 0x0B,
      0xE9, 0x0E, 0xE2, 0xA0, 0xB5, 0xB4, 0xF5, 0x7B, 0x1C, 0xBF, 0xC4, 0x4F,
      0x6D, 0xDC, 0x39, 0x6C, 0x1A, 0xE7, 0x7A, 0xFF, 0xDC, 0x80, 0x4D, 0x49,
      0x8C, 0x98, 0x1D, 0xBB, 0x74, 0x17, 0x17, 0x4C, 0xE9, 0x09, 0x4D, 0xEF,
      0xD8, 0x05, 0x7C, 0x6C, 0x45, 0x73, 0xD0, 0x22, 0xC1, 0xA3, 0x41, 0x70,
      0xFC, 0xC0, 0xB6, 0xC1, 0x81, 0xBA, 0x38, 0x1D, 0x95, 0x3D, 0x0E, 0xAA,
      0x59, 0x8E, 0x93, 0xD2, 0x64, 0x98, 0xB9, 0x0C, 0x6B, 0x50, 0xC7, 0x6D,
      0x42, 0xD5, 0xE1, 0xF3, 0x69, 0xBD, 0x44, 0x78, 0xF7, 0xE4, 0x9F, 0x87,
      0x44, 0x02, 0x28, 0xBB, 0xE0, 0xAA, 0xD0, 0x99, 0x98, 0xBE, 0x5A, 0xD6,
      0xF2, 0x17, 0x17, 0xFB, 0x74, 0xF3, 0xBE, 0xFA, 0xE8, 0x80, 0xA7, 0x33,
      0xFF, 0x0B, 0xDE, 0xB0, 0x8F, 0xE5, 0xD2, 0x62, 0xCB, 0xD0, 0x01, 0xF6,
      0x10, 0xBB, 0xA2, 0x34, 0x91, 0x55, 0xC2, 0x87, 0xA0, 0x6B, 0x25, 0x52,
      0xD8, 0x70, 0x1A, 0x8A, 0x96, 0x63, 0xA8, 0x38, 0x22, 0x99, 0x41, 0xE2,
      0x64, 0xE9, 0xE4, 0x63, 0xA1, 0xD3, 0x13, 0xB0, 0x01, 0xED, 0x9F, 0xA0,
      0x05, 0x03, 0xB2, 0x5A, 0x16, 0x44, 0x1B, 0xC6, 0x6D, 0xF6, 0x79, 0xB4,
      0xA1, 0x63, 0xA8, 0x2D, 0xDB, 0xEE, 0x54, 0xAA, 0x70, 0xEF, 0x2C, 0x45,
      0xC8, 0x7F, 0x42, 0xEB, 0x9F, 0xCA, 0x98, 0xF9, 0xB8, 0x34, 0xDB, 0x83,
      0x11, 0x02, 0x03, 0x01, 0x00, 0x01};

  base::Value::Dict converted =
      ConvertPkeySpkiToJwk(crypto::SignatureVerifier::RSA_PKCS1_SHA1, kSpki);
  EXPECT_TRUE(converted.empty());
}

TEST(JWKUtilsTest, RS256) {
  auto [spki, jwk] = GetRS256SpkiAndJwkForTesting();

  base::Value expected =
      base::JSONReader::Read(jwk, base::JSON_PARSE_CHROMIUM_EXTENSIONS).value();
  base::Value::Dict converted =
      ConvertPkeySpkiToJwk(crypto::SignatureVerifier::RSA_PKCS1_SHA256, spki);
  EXPECT_EQ(converted, expected);
}

TEST(JWKUtilsTest, ES256) {
  static constexpr char kJwk[] = R"json({
    "kty": "EC",
    "crv": "P-256",
    "x": "heUidIx0GC1lJWxEGSliA2J6NY4uUuZY5QYVvB5BQhU",
    "y": "AHdtNFoxemoUM20ldTE7uaRpgsgEJDLjgkZ_L7Q7Rn4"})json";

  base::Value expected =
      base::JSONReader::Read(kJwk, base::JSON_PARSE_CHROMIUM_EXTENSIONS)
          .value();
  base::Value::Dict converted =
      ConvertPkeySpkiToJwk(crypto::SignatureVerifier::ECDSA_SHA256, kES256Spki);
  EXPECT_EQ(converted, expected);
}

TEST(JWKUtilsTest, CreateJwkThumbprintRS256) {
  // This is the RSA example from RFC 7638.
  static constexpr uint8_t kSpki[] = {
      0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
      0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00,
      0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xd2, 0xfc, 0x7b,
      0x6a, 0x0a, 0x1e, 0x6c, 0x67, 0x10, 0x4a, 0xeb, 0x8f, 0x88, 0xb2, 0x57,
      0x66, 0x9b, 0x4d, 0xf6, 0x79, 0xdd, 0xad, 0x09, 0x9b, 0x5c, 0x4a, 0x6c,
      0xd9, 0xa8, 0x80, 0x15, 0xb5, 0xa1, 0x33, 0xbf, 0x0b, 0x85, 0x6c, 0x78,
      0x71, 0xb6, 0xdf, 0x00, 0x0b, 0x55, 0x4f, 0xce, 0xb3, 0xc2, 0xed, 0x51,
      0x2b, 0xb6, 0x8f, 0x14, 0x5c, 0x6e, 0x84, 0x34, 0x75, 0x2f, 0xab, 0x52,
      0xa1, 0xcf, 0xc1, 0x24, 0x40, 0x8f, 0x79, 0xb5, 0x8a, 0x45, 0x78, 0xc1,
      0x64, 0x28, 0x85, 0x57, 0x89, 0xf7, 0xa2, 0x49, 0xe3, 0x84, 0xcb, 0x2d,
      0x9f, 0xae, 0x2d, 0x67, 0xfd, 0x96, 0xfb, 0x92, 0x6c, 0x19, 0x8e, 0x07,
      0x73, 0x99, 0xfd, 0xc8, 0x15, 0xc0, 0xaf, 0x09, 0x7d, 0xde, 0x5a, 0xad,
      0xef, 0xf4, 0x4d, 0xe7, 0x0e, 0x82, 0x7f, 0x48, 0x78, 0x43, 0x24, 0x39,
      0xbf, 0xee, 0xb9, 0x60, 0x68, 0xd0, 0x47, 0x4f, 0xc5, 0x0d, 0x6d, 0x90,
      0xbf, 0x3a, 0x98, 0xdf, 0xaf, 0x10, 0x40, 0xc8, 0x9c, 0x02, 0xd6, 0x92,
      0xab, 0x3b, 0x3c, 0x28, 0x96, 0x60, 0x9d, 0x86, 0xfd, 0x73, 0xb7, 0x74,
      0xce, 0x07, 0x40, 0x64, 0x7c, 0xee, 0xea, 0xa3, 0x10, 0xbd, 0x12, 0xf9,
      0x85, 0xa8, 0xeb, 0x9f, 0x59, 0xfd, 0xd4, 0x26, 0xce, 0xa5, 0xb2, 0x12,
      0x0f, 0x4f, 0x2a, 0x34, 0xbc, 0xab, 0x76, 0x4b, 0x7e, 0x6c, 0x54, 0xd6,
      0x84, 0x02, 0x38, 0xbc, 0xc4, 0x05, 0x87, 0xa5, 0x9e, 0x66, 0xed, 0x1f,
      0x33, 0x89, 0x45, 0x77, 0x63, 0x5c, 0x47, 0x0a, 0xf7, 0x5c, 0xf9, 0x2c,
      0x20, 0xd1, 0xda, 0x43, 0xe1, 0xbf, 0xc4, 0x19, 0xe2, 0x22, 0xa6, 0xf0,
      0xd0, 0xbb, 0x35, 0x8c, 0x5e, 0x38, 0xf9, 0xcb, 0x05, 0x0a, 0xea, 0xfe,
      0x90, 0x48, 0x14, 0xf1, 0xac, 0x1a, 0xa4, 0x9c, 0xca, 0x9e, 0xa0, 0xca,
      0x83, 0x02, 0x03, 0x01, 0x00, 0x01};
  static constexpr char kJwk[] = R"json({
      "kty": "RSA",
      "n": "0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw",
      "e": "AQAB"
  })json";
  ASSERT_EQ(
      ConvertPkeySpkiToJwk(crypto::SignatureVerifier::RSA_PKCS1_SHA256, kSpki),
      base::JSONReader::Read(kJwk, base::JSON_PARSE_CHROMIUM_EXTENSIONS)
          .value());

  static constexpr char kExpectedThumbprint[] =
      "NzbLsXh8uDCcd-6MNwXF4W_7noWXFZAfHkxZsRGC9Xs";

  std::string thumbprint =
      CreateJwkThumbprint(crypto::SignatureVerifier::RSA_PKCS1_SHA256, kSpki);
  EXPECT_EQ(thumbprint, kExpectedThumbprint);
}

TEST(JWKUtilsTest, CreateJwkThumbprintES256) {
  static constexpr char kExpectedThumbprint[] =
      "_ECzPdFweUQepHljFjcCo0Oy5mhyMgyP5_DqdNhevXk";

  std::string thumbprint =
      CreateJwkThumbprint(crypto::SignatureVerifier::ECDSA_SHA256, kES256Spki);
  EXPECT_EQ(thumbprint, kExpectedThumbprint);
}

TEST(JWKUtilsTest, CreateJwkThumbprintInvalidSpki) {
  static constexpr uint8_t kBadSpki[] = {0x01, 0x02, 0x03, 0x04};

  EXPECT_EQ(
      CreateJwkThumbprint(crypto::SignatureVerifier::ECDSA_SHA256, kBadSpki),
      "");
}

}  // namespace

}  // namespace net::device_bound_sessions
