// Copyright 2025 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package org.chromium.components.collaboration.comments;

import org.chromium.base.Callback;
import org.chromium.build.annotations.NullMarked;
import org.chromium.build.annotations.Nullable;
import org.chromium.components.data_sharing.GroupMember;
import org.chromium.url.GURL;

import java.util.List;
import java.util.UUID;

/**
 * This interface serves as the primary interaction point for the UI to query for and manage
 * comments. It provides a purely asynchronous API for all data access to ensure the UI thread is
 * never blocked. The main implementation for this lives as a KeyedService in C++.
 */
@NullMarked
public interface CommentsService {

    /** Data for a comment attributed to a URL. */
    class UrlAttribution {
        /** The URL being attributed. */
        public final GURL url;

        public UrlAttribution(GURL url) {
            this.url = url;
        }
    }

    /** Data for a comment attributed to specific content (e.g., highlighted text). */
    class ContentAttribution {
        /** Human-readable preview of the highlighted text. */
        public final String previewText;

        /** The text fragment component used by the browser to find and highlight the text. */
        public final String textFragment;

        public ContentAttribution(String previewText, String textFragment) {
            this.previewText = previewText;
            this.textFragment = textFragment;
        }
    }

    /**
     * Represents the specific details of where a comment is attributed. A comment with
     * ContentAttribution must also have UrlAttribution.
     */
    class AttributionData {
        @Nullable private final UrlAttribution mUrlData;
        @Nullable private final ContentAttribution mContentData;

        /** No attribution. */
        public AttributionData() {
            this(null, null);
        }

        /** URL attribution. */
        public AttributionData(UrlAttribution urlData) {
            this(urlData, null);
        }

        /** Content attribution (which includes URL). */
        public AttributionData(
                @Nullable UrlAttribution urlData, @Nullable ContentAttribution contentData) {
            this.mUrlData = urlData;
            this.mContentData = contentData;
        }

        public @AttributionLevel int getAttributionLevel() {
            if (mContentData != null) return AttributionLevel.CONTENT;
            if (mUrlData != null) return AttributionLevel.URL;
            return AttributionLevel.NONE;
        }

        @Nullable
        public UrlAttribution getAsUrl() {
            return mUrlData;
        }

        @Nullable
        public ContentAttribution getAsContent() {
            return mContentData;
        }
    }

    /**
     * Defines a key used for deterministically sorting comments in a distributed system. This
     * ensures that all clients render comments in the same stable order, regardless of network
     * timing or processing order.
     */
    class OrderKey {
        /**
         * The primary sorting timestamp, typically from the server. This value may be locally
         * adjusted to be >= the timestamp of the preceding comment from the same source to
         * guarantee monotonic ordering per source.
         */
        public final long sortTimestampMillis;

        /**
         * A unique identifier for the device or client that authored the comment (e.g., a UUID).
         * This serves as the main tie-breaker for comments with identical timestamps.
         */
        public final String sourceId;

        /**
         * A strictly monotonically increasing sequence number generated by the source device. This
         * provides a final, definitive ordering for comments created by the same source, even if
         * they arrive out of order.
         */
        public final long localSequence;

        public OrderKey(long sortTimestampMillis, String sourceId, long localSequence) {
            this.sortTimestampMillis = sortTimestampMillis;
            this.sourceId = sourceId;
            this.localSequence = localSequence;
        }
    }

    /**
     * Represents a single comment. The Query API returns a flat sorted list of these objects to the
     * UI.
     */
    class Comment {
        /** Unique ID of the comment. */
        public final UUID id;

        /** If present, this comment is a reply to the specified parent comment. */
        @Nullable public final UUID parentCommentId;

        /** The text of the comment. */
        public final String content;

        /** Information about the user who added the comment. */
        @Nullable public final GroupMember authorInfo;

        /**
         * Timestamp to be used for display purposes in milliseconds since epoch. This might be the
         * creation timestamp or the latest reply timestamp for a thread.
         */
        public final long displayTimestampMillis;

        /** ID of the collaboration context this comment belongs to. */
        public final String collaborationId;

        /**
         * Specifies the level and associated data for where the comment is attributed (e.g., URL,
         * content, group).
         */
        public final AttributionData data;

        /** Defines a key used for deterministically ordering comments. */
        public final OrderKey orderKey;

        /** Tells the type of comment. */
        public final @CommentType int commentType;

        public Comment(
                UUID id,
                @Nullable UUID parentCommentId,
                String content,
                @Nullable GroupMember authorInfo,
                long displayTimestampMillis,
                String collaborationId,
                AttributionData data,
                OrderKey orderKey,
                @CommentType int commentType) {
            this.id = id;
            this.parentCommentId = parentCommentId;
            this.content = content;
            this.authorInfo = authorInfo;
            this.displayTimestampMillis = displayTimestampMillis;
            this.collaborationId = collaborationId;
            this.data = data;
            this.orderKey = orderKey;
            this.commentType = commentType;
        }
    }

    /** Defines the filtering criteria for a query. */
    class FilterCriteria {
        @Nullable public final String collaborationId;
        @Nullable public final GURL url;

        /** Whether to include replies in the results. Defaults to true. */
        public final boolean includeThreads;

        public FilterCriteria(
                @Nullable String collaborationId, @Nullable GURL url, boolean includeThreads) {
            this.collaborationId = collaborationId;
            this.url = url;
            this.includeThreads = includeThreads;
        }

        /** Creates a default filter criteria. */
        public FilterCriteria() {
            this(null, null, true);
        }
    }

    /** Defines the pagination settings for a query. */
    class PaginationCriteria {
        /**
         * If set to 0, indicates a request for all matching results (no pagination). If set to a
         * positive value, indicates the maximum number of results to return. Defaults to 0.
         */
        public final long maxTotalResults;

        public PaginationCriteria(long maxTotalResults) {
            this.maxTotalResults = maxTotalResults;
        }

        /** Creates a default pagination criteria (no limit). */
        public PaginationCriteria() {
            this(0);
        }
    }

    /** Represents a comment and its replies in a hierarchical structure. */
    class HierarchicalComment {
        /** The top-level comment. */
        public final Comment comment;

        /** Single-level replies. */
        public final List<Comment> replies;

        public HierarchicalComment(Comment comment, List<Comment> replies) {
            this.comment = comment;
            this.replies = replies;
        }
    }

    /** Contains the results from an asynchronous Query API call. */
    class QueryResult {
        public final List<HierarchicalComment> comments;

        /**
         * Indicates whether there are more comments available beyond what was returned in the
         * current QueryResult. This is particularly useful when {@code
         * PaginationCriteria.maxTotalResults} > 0 and UI can show "load more" based on this info.
         */
        public final boolean hasMoreComments;

        public QueryResult(List<HierarchicalComment> comments, boolean hasMoreComments) {
            this.comments = comments;
            this.hasMoreComments = hasMoreComments;
        }
    }

    /** Interface for clients (like the UI) to observe real-time changes to comments. */
    interface CommentsObserver {
        /**
         * Called exactly once when the CommentsService has finished initializing and is ready to be
         * used.
         */
        default void onServiceInitialized() {}

        /**
         * Called when new comments are added. The {@code newComments} list is topologically sorted,
         * meaning a parent comment is guaranteed to appear before any of its replies.
         */
        default void onCommentsAdded(List<Comment> newComments) {}

        /**
         * Called when any existing comments are modified and match the filtering criteria
         * registered by the observer. {@code oldComments} is useful to determine what has changed.
         */
        default void onCommentsModified(List<Comment> updatedComments, List<Comment> oldComments) {}

        /**
         * Called when comments are deleted and match the filtering criteria registered by the
         * observer.
         */
        default void onCommentsDeleted(List<UUID> deletedCommentIds) {}

        /**
         * Called when the overall set of comments for a given collaboration/URL might have changed
         * significantly, requiring a full re-query by the UI.
         */
        default void onCommentsInvalidated() {}
    }

    // Returns whether the service has fully initialized.
    boolean isInitialized();

    // Returns true if this is an empty implementation.
    boolean isEmptyService();

    /**
     * Adds a new comment or, if {@code parentCommentId} is provided, a reply. Returns the new
     * comment's ID synchronously. The success or failure of the asynchronous save operation is
     * reported via {@code successCallback}.
     *
     * @param collaborationId The ID of the collaboration context.
     * @param url The URL the comment is associated with.
     * @param content The text of the comment.
     * @param parentCommentId The ID of the parent comment, if this is a reply.
     * @param successCallback A callback to report the success of the operation.
     * @return The unique ID of the newly created comment.
     */
    UUID addComment(
            String collaborationId,
            GURL url,
            String content,
            @Nullable UUID parentCommentId,
            Callback<Boolean> successCallback);

    /**
     * Asynchronously edits the content of an existing comment. Reports success via {@code
     * successCallback}.
     *
     * @param commentId The ID of the comment to edit.
     * @param newContent The new text for the comment.
     * @param successCallback A callback to report the success of the operation.
     */
    void editComment(UUID commentId, String newContent, Callback<Boolean> successCallback);

    /**
     * Asynchronously deletes a comment (and all of its replies). Reports success via {@code
     * successCallback}.
     *
     * @param commentId The ID of the comment to delete.
     * @param successCallback A callback to report the success of the operation.
     */
    void deleteComment(UUID commentId, Callback<Boolean> successCallback);

    /**
     * Asynchronously retrieves comments based on the given criteria. The results are returned via
     * the {@code callback}.
     *
     * @param filterCriteria The filtering criteria for the query.
     * @param paginationCriteria The pagination settings for the query.
     * @param callback A callback to receive the {@link QueryResult}.
     */
    void queryComments(
            FilterCriteria filterCriteria,
            PaginationCriteria paginationCriteria,
            Callback<QueryResult> callback);

    /**
     * Adds an observer to be notified of real-time updates to comments that match the given {@code
     * filterCriteria}. An empty criteria will result in receiving all updates.
     *
     * @param observer The observer to add.
     * @param filterCriteria The filter for which the observer should receive updates.
     */
    void addObserver(CommentsObserver observer, FilterCriteria filterCriteria);

    /**
     * Removes a previously added observer.
     *
     * @param observer The observer to remove.
     */
    void removeObserver(CommentsObserver observer);
}
