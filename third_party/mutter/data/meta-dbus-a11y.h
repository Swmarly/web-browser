/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __META_DBUS_A11Y_H__
#define __META_DBUS_A11Y_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.a11y.KeyboardMonitor */

#define META_DBUS_TYPE_KEYBOARD_MONITOR (meta_dbus_keyboard_monitor_get_type ())
#define META_DBUS_KEYBOARD_MONITOR(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), META_DBUS_TYPE_KEYBOARD_MONITOR, MetaDBusKeyboardMonitor))
#define META_DBUS_IS_KEYBOARD_MONITOR(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), META_DBUS_TYPE_KEYBOARD_MONITOR))
#define META_DBUS_KEYBOARD_MONITOR_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), META_DBUS_TYPE_KEYBOARD_MONITOR, MetaDBusKeyboardMonitorIface))

struct _MetaDBusKeyboardMonitor;
typedef struct _MetaDBusKeyboardMonitor MetaDBusKeyboardMonitor;
typedef struct _MetaDBusKeyboardMonitorIface MetaDBusKeyboardMonitorIface;

struct _MetaDBusKeyboardMonitorIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_grab_keyboard) (
    MetaDBusKeyboardMonitor *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_key_grabs) (
    MetaDBusKeyboardMonitor *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_modifiers,
    GVariant *arg_keystrokes);

  gboolean (*handle_ungrab_keyboard) (
    MetaDBusKeyboardMonitor *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_unwatch_keyboard) (
    MetaDBusKeyboardMonitor *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_watch_keyboard) (
    MetaDBusKeyboardMonitor *object,
    GDBusMethodInvocation *invocation);

  void (*key_event) (
    MetaDBusKeyboardMonitor *object,
    gboolean arg_released,
    guint arg_state,
    guint arg_keysym,
    guint arg_unichar,
    guint16 arg_keycode);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MetaDBusKeyboardMonitor, g_object_unref)
#endif

GType meta_dbus_keyboard_monitor_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *meta_dbus_keyboard_monitor_interface_info (void);
guint meta_dbus_keyboard_monitor_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void meta_dbus_keyboard_monitor_complete_grab_keyboard (
    MetaDBusKeyboardMonitor *object,
    GDBusMethodInvocation *invocation);

void meta_dbus_keyboard_monitor_complete_ungrab_keyboard (
    MetaDBusKeyboardMonitor *object,
    GDBusMethodInvocation *invocation);

void meta_dbus_keyboard_monitor_complete_watch_keyboard (
    MetaDBusKeyboardMonitor *object,
    GDBusMethodInvocation *invocation);

void meta_dbus_keyboard_monitor_complete_unwatch_keyboard (
    MetaDBusKeyboardMonitor *object,
    GDBusMethodInvocation *invocation);

void meta_dbus_keyboard_monitor_complete_set_key_grabs (
    MetaDBusKeyboardMonitor *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void meta_dbus_keyboard_monitor_emit_key_event (
    MetaDBusKeyboardMonitor *object,
    gboolean arg_released,
    guint arg_state,
    guint arg_keysym,
    guint arg_unichar,
    guint16 arg_keycode);



/* D-Bus method calls: */
void meta_dbus_keyboard_monitor_call_grab_keyboard (
    MetaDBusKeyboardMonitor *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean meta_dbus_keyboard_monitor_call_grab_keyboard_finish (
    MetaDBusKeyboardMonitor *proxy,
    GAsyncResult *res,
    GError **error);

gboolean meta_dbus_keyboard_monitor_call_grab_keyboard_sync (
    MetaDBusKeyboardMonitor *proxy,
    GCancellable *cancellable,
    GError **error);

void meta_dbus_keyboard_monitor_call_ungrab_keyboard (
    MetaDBusKeyboardMonitor *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean meta_dbus_keyboard_monitor_call_ungrab_keyboard_finish (
    MetaDBusKeyboardMonitor *proxy,
    GAsyncResult *res,
    GError **error);

gboolean meta_dbus_keyboard_monitor_call_ungrab_keyboard_sync (
    MetaDBusKeyboardMonitor *proxy,
    GCancellable *cancellable,
    GError **error);

void meta_dbus_keyboard_monitor_call_watch_keyboard (
    MetaDBusKeyboardMonitor *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean meta_dbus_keyboard_monitor_call_watch_keyboard_finish (
    MetaDBusKeyboardMonitor *proxy,
    GAsyncResult *res,
    GError **error);

gboolean meta_dbus_keyboard_monitor_call_watch_keyboard_sync (
    MetaDBusKeyboardMonitor *proxy,
    GCancellable *cancellable,
    GError **error);

void meta_dbus_keyboard_monitor_call_unwatch_keyboard (
    MetaDBusKeyboardMonitor *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean meta_dbus_keyboard_monitor_call_unwatch_keyboard_finish (
    MetaDBusKeyboardMonitor *proxy,
    GAsyncResult *res,
    GError **error);

gboolean meta_dbus_keyboard_monitor_call_unwatch_keyboard_sync (
    MetaDBusKeyboardMonitor *proxy,
    GCancellable *cancellable,
    GError **error);

void meta_dbus_keyboard_monitor_call_set_key_grabs (
    MetaDBusKeyboardMonitor *proxy,
    GVariant *arg_modifiers,
    GVariant *arg_keystrokes,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean meta_dbus_keyboard_monitor_call_set_key_grabs_finish (
    MetaDBusKeyboardMonitor *proxy,
    GAsyncResult *res,
    GError **error);

gboolean meta_dbus_keyboard_monitor_call_set_key_grabs_sync (
    MetaDBusKeyboardMonitor *proxy,
    GVariant *arg_modifiers,
    GVariant *arg_keystrokes,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define META_DBUS_TYPE_KEYBOARD_MONITOR_PROXY (meta_dbus_keyboard_monitor_proxy_get_type ())
#define META_DBUS_KEYBOARD_MONITOR_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), META_DBUS_TYPE_KEYBOARD_MONITOR_PROXY, MetaDBusKeyboardMonitorProxy))
#define META_DBUS_KEYBOARD_MONITOR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), META_DBUS_TYPE_KEYBOARD_MONITOR_PROXY, MetaDBusKeyboardMonitorProxyClass))
#define META_DBUS_KEYBOARD_MONITOR_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), META_DBUS_TYPE_KEYBOARD_MONITOR_PROXY, MetaDBusKeyboardMonitorProxyClass))
#define META_DBUS_IS_KEYBOARD_MONITOR_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), META_DBUS_TYPE_KEYBOARD_MONITOR_PROXY))
#define META_DBUS_IS_KEYBOARD_MONITOR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), META_DBUS_TYPE_KEYBOARD_MONITOR_PROXY))

typedef struct _MetaDBusKeyboardMonitorProxy MetaDBusKeyboardMonitorProxy;
typedef struct _MetaDBusKeyboardMonitorProxyClass MetaDBusKeyboardMonitorProxyClass;
typedef struct _MetaDBusKeyboardMonitorProxyPrivate MetaDBusKeyboardMonitorProxyPrivate;

struct _MetaDBusKeyboardMonitorProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  MetaDBusKeyboardMonitorProxyPrivate *priv;
};

struct _MetaDBusKeyboardMonitorProxyClass
{
  GDBusProxyClass parent_class;
};

GType meta_dbus_keyboard_monitor_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MetaDBusKeyboardMonitorProxy, g_object_unref)
#endif

void meta_dbus_keyboard_monitor_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
MetaDBusKeyboardMonitor *meta_dbus_keyboard_monitor_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
MetaDBusKeyboardMonitor *meta_dbus_keyboard_monitor_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void meta_dbus_keyboard_monitor_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
MetaDBusKeyboardMonitor *meta_dbus_keyboard_monitor_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
MetaDBusKeyboardMonitor *meta_dbus_keyboard_monitor_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define META_DBUS_TYPE_KEYBOARD_MONITOR_SKELETON (meta_dbus_keyboard_monitor_skeleton_get_type ())
#define META_DBUS_KEYBOARD_MONITOR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), META_DBUS_TYPE_KEYBOARD_MONITOR_SKELETON, MetaDBusKeyboardMonitorSkeleton))
#define META_DBUS_KEYBOARD_MONITOR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), META_DBUS_TYPE_KEYBOARD_MONITOR_SKELETON, MetaDBusKeyboardMonitorSkeletonClass))
#define META_DBUS_KEYBOARD_MONITOR_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), META_DBUS_TYPE_KEYBOARD_MONITOR_SKELETON, MetaDBusKeyboardMonitorSkeletonClass))
#define META_DBUS_IS_KEYBOARD_MONITOR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), META_DBUS_TYPE_KEYBOARD_MONITOR_SKELETON))
#define META_DBUS_IS_KEYBOARD_MONITOR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), META_DBUS_TYPE_KEYBOARD_MONITOR_SKELETON))

typedef struct _MetaDBusKeyboardMonitorSkeleton MetaDBusKeyboardMonitorSkeleton;
typedef struct _MetaDBusKeyboardMonitorSkeletonClass MetaDBusKeyboardMonitorSkeletonClass;
typedef struct _MetaDBusKeyboardMonitorSkeletonPrivate MetaDBusKeyboardMonitorSkeletonPrivate;

struct _MetaDBusKeyboardMonitorSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  MetaDBusKeyboardMonitorSkeletonPrivate *priv;
};

struct _MetaDBusKeyboardMonitorSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType meta_dbus_keyboard_monitor_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MetaDBusKeyboardMonitorSkeleton, g_object_unref)
#endif

MetaDBusKeyboardMonitor *meta_dbus_keyboard_monitor_skeleton_new (void);


G_END_DECLS

#endif /* __META_DBUS_A11Y_H__ */
