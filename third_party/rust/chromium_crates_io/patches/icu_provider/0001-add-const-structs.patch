commit 955a1fd0855be359996d284502031922bfb2c966
Author: Robert Bastian <4706271+robertbastian@users.noreply.github.com>
Date:   Thu Jun 5 19:32:21 2025 +0200

    Expose const structs in baked data (#6652)
    
    #6249
    
    #6161
diff --git a/third_party/rust/chromium_crates_io/vendor/icu_provider-v2/src/baked/zerotrie.rs b/third_party/rust/chromium_crates_io/vendor/icu_provider-v2/src/baked/zerotrie.rs
index 7aee2b0f03a02..4763b479bfbf1 100644
--- a/third_party/rust/chromium_crates_io/vendor/icu_provider-v2/src/baked/zerotrie.rs
+++ b/third_party/rust/chromium_crates_io/vendor/icu_provider-v2/src/baked/zerotrie.rs
@@ -107,6 +107,52 @@ impl<M: DataMarker> super::DataStore<M> for Data<M> {
     }
 }
 
+/// Regular baked data: a trie for lookups and a slice of values
+#[derive(Debug)]
+pub struct DataRef<M: DataMarker> {
+    // Unsafe invariant: actual values contained MUST be valid indices into `values`
+    trie: ZeroTrieSimpleAscii<&'static [u8]>,
+    values: &'static [&'static M::DataStruct],
+}
+
+impl<M: DataMarker> DataRef<M> {
+    /// Construct from a trie and references to values
+    ///
+    /// # Safety
+    /// The actual values contained in the trie must be valid indices into `values`
+    pub const unsafe fn from_trie_and_refs_unchecked(
+        trie: ZeroTrieSimpleAscii<&'static [u8]>,
+        values: &'static [&'static M::DataStruct],
+    ) -> Self {
+        Self { trie, values }
+    }
+}
+
+impl<M: DataMarker> super::private::Sealed for DataRef<M> {}
+impl<M: DataMarker> super::DataStore<M> for DataRef<M> {
+    fn get(
+        &self,
+        id: DataIdentifierBorrowed,
+        attributes_prefix_match: bool,
+    ) -> Option<DataPayload<M>> {
+        get_index(self.trie, id, attributes_prefix_match)
+            // Safety: Allowed since `i` came from the trie and the field safety invariant
+            .map(|i| unsafe { self.values.get_unchecked(i) })
+            .copied()
+            .map(DataPayload::from_static_ref)
+    }
+
+    #[cfg(feature = "alloc")]
+    type IterReturn = core::iter::FilterMap<
+        zerotrie::ZeroTrieStringIterator<'static>,
+        fn((alloc::string::String, usize)) -> Option<DataIdentifierCow<'static>>,
+    >;
+    #[cfg(feature = "alloc")]
+    fn iter(&'static self) -> Self::IterReturn {
+        iter(&self.trie)
+    }
+}
+
 /// Optimized data stored as a single VarZeroSlice to reduce token count
 #[allow(missing_debug_implementations)] // Debug on this will not be too useful
 pub struct DataForVarULEs<M: DataMarker>
diff --git a/third_party/rust/chromium_crates_io/vendor/icu_provider-v2/src/marker.rs b/third_party/rust/chromium_crates_io/vendor/icu_provider-v2/src/marker.rs
index d99cbb558bec3..156e9996cfc42 100644
--- a/third_party/rust/chromium_crates_io/vendor/icu_provider-v2/src/marker.rs
+++ b/third_party/rust/chromium_crates_io/vendor/icu_provider-v2/src/marker.rs
@@ -440,6 +440,9 @@ pub struct DataMarkerInfo {
     /// attributes during provider export.
     #[cfg(feature = "export")]
     pub attributes_domain: &'static str,
+    /// Whether to create constants for each data struct in baked data.
+    #[cfg(feature = "export")]
+    pub expose_baked_consts: bool,
 }
 
 impl PartialOrd for DataMarkerInfo {
@@ -470,6 +473,8 @@ impl DataMarkerInfo {
             has_checksum: false,
             #[cfg(feature = "export")]
             attributes_domain: "",
+            #[cfg(feature = "export")]
+            expose_baked_consts: false,
         }
     }
 
