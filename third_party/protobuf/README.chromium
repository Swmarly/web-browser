Name: Protocol Buffers
Short Name: protobuf
URL: https://github.com/google/protobuf
License: BSD-3-Clause
License File: LICENSE
Version: 32.0
CPEPrefix: cpe:/a:google:protobuf:32.0
Revision: 4fbd1111a292d04746c732573025e3251de0bb9c
Update Mechanism: Manual
Security Critical: yes
Shipped: yes

Steps used to create the current version (or roll a newer one):

0. Nuke third_party/protobuf from orbit (rm -rf `third_party/protobuf`). Note
   that this removes this README.chromium so you may want it open in code search
   or remember the steps up until 2. where you get it back.

1. Pull the release from https://github.com/google/protobuf/releases (Source
   code .tar.gz). Extract to `third_party/protobuf` (without version suffix),
   i.e. you may `$ mv protobuf-21.12 third_party/protobuf` or similar.

2. Add back chromium's on-upstream files (from this directory):

   $ git checkout origin/main -- BUILD.gn DEPS DIR_METADATA OWNERS \
     README.chromium gen_extra_chromium_files.py proto_library.gni \
     proto_sources.gni patches/

   Note: The `patches/` directory is already a part of the protobuf repository,
   but it uses subdirectories for its content, while in Chromium we store our
   patches directly in the `patches/` directory.

   Note: Ideally we wouldn't do this but instead have a
   `third_party/protobuf/src/` subdirectory where upstream code goes directly
   into. That will require updating things outside this repository (at least
   `third_party/webrtc`) to agree on where the source code lives. I wouldn't be
   surprised if that also required Google-internal uses of protobuf from webrtc
   to also agree on `third_party/protobuf/src` so maybe this'll never happen?
   Here be dragons. Probably.

   Probably worth making a local `git commit` here before applying patches (next
   step), however, as we still apply 0053-ignore-compatibility-dir.patch you can
   simplify your roll by `rm -r compatibility` before comitting.

3. Apply patches in patches/ (see the description below):

   $ for patch in patches/*.patch; do patch -s -p1 < $patch; done

   When a patch fails, it's probably best to check out previous state (from 2)
   for any changes not inside the patches/ folder, fix the patch and then try to
   reapply everything. It's not a good idea to fix the error, forget to generate
   a patch and leave patches/ in a bad state.

   If a patch no longer applies it may not be needed, if so remove it and its
   description in this README.chromium file. Similarly try to eventually
   upstream any patches out of band from unblocking the roll so we can
   eventually remove it here as well.

   Run `git add src/google/protobuf/compiler/csharp/csharp_names.h` to pick up
   the file added by 0048-csharp-names-redirect.patch

   Probably worth committing locally here too.

4. Generate descriptor_pb2.py using the script "gen_extra_chromium_files.py" in
   the same directory as this file.

   $ ./gen_extra_chromium_files.py -C ../../out/Default

   Add and commit `python/google/protobuf/descriptor_pb2.py` and
   `python/google/protobuf/compiler/plugin_pb2.py` as well. Because *_pb2.py is
   in the .gitignore file for this directory, you need to add the files with
   `-f`.

   $ git add -f python/google/protobuf/descriptor_pb2.py \
     python/google/protobuf/compiler/plugin_pb2.py

5. This step requires `bazel`, and not the one from depot_tools, and it is not
   part of build/install-build-deps.sh in Chromium, so you need to manually
   install it:

   $ apt install bazel

   Run:

   $ cd python/
   $ /usr/bin/bazel build embedded_python_edition_defaults_generate --enable_bzlmod
   $ cp ../bazel-bin/python/google/protobuf/internal/python_edition_defaults.py google/protobuf/internal/
   $ git add google/protobuf/internal/python_edition_defaults.py

   TODO: generalize this and add it to gen_extra_chromium_files.py

6. Update Version, CPEPrefix and Revision in this file.

   The revision should be set to the SHA1 of the commit that the release tag
   points to at the time of the roll.

7. Address breakages.

   The CQ will help you identify problems that need fixing.

   Manually update BUILD.gn and proto_sources.gni as necessary. Hopefully this
   means just adding or moving around some source files, but might also include
   tweaks like modifying compiler flags or macro defines.

   You may need to add new code modifications and diffs in patches/ as well.
   To do this, make the necessary changes in your current local branch, and then
   run the following command to create a patch file with the correct paths:

   $ git diff --relative=third_party/protobuf > patches/your.patch

   In the case of multiple unrelated changes which should have their own
   indivudal patches, you can also add `-- path/to/file` to your `git` command.

   Remember to also update the patch description below.


Notes (hints) for the next roll(er):

* Update README.chromium as you go so you don't forget (after step 2. above, so
  you don't nuke those changes).
* Any argument changes to `protoc_wrapper` in `third_party/protobuf/BUILD.gn`
  may require updating `build/config/siso/protoc_wrapper.star` as well.
* The protobuf wheel for vpython3 needs to stay in sync with this protobuf, at
  least if there are breaking changes in protobuf's python bindings. See
  https://chromium.googlesource.com/infra/infra/+/refs/heads/main/infra/tools/dockerbuild/README.wheels.md

Note about vpython:

Some Python scripts end up mixing protoc output from this copy of protobuf with
the google.protobuf module from vpython's protobuf. If Python scripts break due
to the vpython copy of protobuf, you may need to update the version in
//.vpython3. See https://crbug.com/1320047.

Description of the patches:

- 0004-fix-shared-library-exports.patch

  This patch allows exporting protobuf symbols in Linux .so libraries, so
  that protobuf can be built as a component (see http://crrev.com/179806).

- 0008-uninline_get_empty_string.patch
- 0010-uninline-generated-code.patch

  These patches uninline some functions, resulting in a significant reduction
  (somewhere between 500 KB and 1 MB) of binary size.

- 0022-Allow-deprecated-fields.patch

  Allows deprecated fields to be used without extra C++ compiler warnings.

- 0029-make-initializers-optimizable.patch

  Removes a static initializer from Linux and Android builds.

  Makes the InitProtobufDefaults() static initializer optimizable by Clang when
  built with libc++. It patches out the OnShutdownDestroyString call, which we
  do not need, and removes the thread-safe initialization. Thread safety is only
  needed if a static initializer spawns a thread which then calls
  InitProtobufDefaults() without synchronizing with the start of main().
  (Anything which happens after main() starts can rely on the initializer
  running.)

  Later updated to patch out PROTOBUF_DESCRIPTOR_WEAK_MESSAGES_ALLOWED code
  which was not optimizable.

- 0030-workaround-window-constinit.patch

  Disables PROTOBUF_CONSTINIT in generated code in Windows shared library
  builds. Protobuf's default instances take pointers to a dllimport variable,
  fixed_address_empty_string. This is not constinit on Windows. This is a bug in
  protobuf as the default instance was intended to be constant-initialized. But
  the components build in Chromium is a developer configuration, so we tolerate
  an initializer as long as the build works, until protobuf has a proper fix.

  See https://github.com/protocolbuffers/protobuf/issues/10159.

  Feb-2025: this patch was updated to address an issue where code internal to
  PB assumed that the default instances it was acting on were const inited,
  when they were not constinit due to the Chromium workaround. See related
  PB commit:
  https://github.com/protocolbuffers/protobuf/commit/f5c53ac4605aa5a276e9786952d467fe1fda5420

- 0031-workaround-cfi-unrelated-cast.patch

  A workaround for Clang's Control Flow Integrity check for casting pointers to
  memory that his not yet initialized to be of that type for empty arrays, does
  not work, and still fails. This patch removes the workaround and instead
  disables cfi-unrelated-cast for the affected methods and simplifies them.

  See https://github.com/protocolbuffers/protobuf/issues/10186.
  See https://bugs.chromium.org/p/chromium/issues/detail?id=1294200#c26.

- 0039-generate-mediapipe-anylite.patch

  Workaround to allow generating protobuf code compatible with
  third_party/mediapipe. This replaces checked-in precompiled .pb.cc files. See
  https://crbug.com/332939935, which when/if resolved should make this patch
  obsolete.

- 0042-fix-undefined-protobuf-custom-vtable.patch

  Fixes the build when PROTOBUF_CUSTOM_VTABLE is not defined.

- 0043-unreachable-code-return.patch

  Fix unreachable code warning via `if constexpr`.

- 0044-trim-protoc-main.patch

  Remove parts of protoc's main.cc that aren't necessary for Chromium (languages
  such as C#, PHP, Ruby, etc.).

- 0045-string-resize.patch

  Replaces usage of absl internal string routines with std::string::resize().

- 0048-csharp-names-redirect.patch

  A header file moved and this is added to redirect code that hasn't been
  updated for newer protobuf to the new location. This code isn't actually
  linked. This can be removed after GRPC is rolled. NB this has to be manually
  added with `git add` if you are following the instructions above.

- 0049-deprecated-declarations-pragma.patch

  Modify a compiler diagnostic pragma to work on Windows.

- 0051-export-template-define.patch

  Adds some missing export defines to fix Windows component build.

- 0052-remove-dynanmic-annotations.patch

  This removes dynamic annotations (for containers; an ASAN tool). The use of
  absl's dynamic_annotations is banned in Chromium (see
  //third_party/abseil-cpp/BUILD.gn), on top of which, Protobuf's usage is
  buggy. PlacementNew copies RepeatedFields wholesale via memcp, which triggers
  false positive out-of-bounds reads. See
  https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow

- 0053-ignore-compatibility-dir.patch

  Add the compatability dir to .gitignore as it's unnecessary and contains files
  that trip CheckForTooLargeFiles presubmit.

  Note that if you commit locally before applying the patches, you might need to
  manually remove this directory again from git.

- 0055-fix-deprecated-weak-accessor-in-descriptor.patch

  Removes a single [[deprecated]] attribute from the FieldOptions::weak()
  accessor in the pre-generated descriptor.pb.h file. This fixes a build
  warning without the noise of regenerating the entire file.

- 0056-fix-use-of-deprecated-has_optional_keyword.patch

  Updates the implementation of the deprecated
  FieldDescriptor::has_optional_keyword() to use the recommended has_presence()
  method, fixing a deprecation error.
